// dear imgui: Platform Backend for X11 (Linux)
// This needs to be used along with a Renderer (e.g. OpenGL3, Vulkan..)

// Implemented features:
//  [X] Platform: Clipboard support (for X11 this is actually part of core dear imgui)
//  [X] Platform: Mouse support. Can discriminate Mouse/TouchScreen/Pen.
//  [X] Platform: Keyboard support. Since 1.87 we are using the io.AddKeyEvent() function. Pass ImGuiKey values to all key functions e.g. ImGui::IsKeyPressed(ImGuiKey_Space). [Legacy XK_* values will also be supported unless IMGUI_DISABLE_OBSOLETE_KEYIO is set]
//  [X] Platform: Mouse cursor shape and visibility. Disable with 'io.ConfigFlags |= ImGuiConfigFlags_NoMouseCursorChange'.

// You can use unmodified imgui_impl_* files in your project. See examples/ folder for examples of using this.
// Prefer including the entire imgui/ repository into your project (either as a copy or as a submodule), and only build the backends you need.
// Learn about Dear ImGui:
// - FAQ                  https://dearimgui.com/faq
// - Getting Started      https://dearimgui.com/getting-started
// - Documentation        https://dearimgui.com/docs (same as your local docs/ folder).
// - Introduction, links and more at the top of imgui.cpp

#include <X11/Xlib.h>
#include <X11/XKBlib.h>
#include <X11/keysym.h>
#include <X11/cursorfont.h>
#include <locale.h>
#include <langinfo.h>
#include <cstring>
#include <ctime>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <linux/input.h>
// #include <libevdev/libevdev.h>

#include "imgui.h"
#ifndef IMGUI_DISABLE
#include "imgui_impl_x11.h"

// Configuration flags to add in your imconfig.h file:
//#define IMGUI_IMPL_X11_DISABLE_GAMEPAD              // Disable gamepad support. This was meaningful before <1.81 but we now load XInput dynamically so the option is now less relevant.

// CHANGELOG
// (minor and older changes stripped away, please see git history for details)
//  2023-10-05: Inputs: Added support for extra ImGuiKey values: F13 to F24 function keys, app back/forward keys.
//  2023-09-25: Inputs: Synthesize key-down event on key-up for VK_SNAPSHOT / ImGuiKey_PrintScreen as Windows doesn't emit it (same behavior as GLFW/SDL).
//  2023-09-07: Inputs: Added support for keyboard codepage conversion for when application is compiled in MBCS mode and using a non-Unicode window.
//  2023-04-19: Added ImGui_ImplX11_InitForOpenGL() to facilitate combining raw X11 with OpenGL. (#3218)
//  2023-04-04: Inputs: Added support for io.AddMouseSourceEvent() to discriminate ImGuiMouseSource_Mouse/ImGuiMouseSource_TouchScreen/ImGuiMouseSource_Pen. (#2702)
//  2023-02-15: Inputs: Use WM_NCMOUSEMOVE / WM_NCMOUSELEAVE to track mouse position over non-client area (e.g. OS decorations) when app is not focused. (#6045, #6162)
//  2023-02-02: Inputs: Flipping WM_MOUSEHWHEEL (horizontal mouse-wheel) value to match other backends and offer consistent horizontal scrolling direction. (#4019, #6096, #1463)
//  2022-10-11: Using 'nullptr' instead of 'NULL' as per our switch to C++11.
//  2022-09-28: Inputs: Convert WM_CHAR values with MultiByteToWideChar() when window class was registered as MBCS (not Unicode).
//  2022-09-26: Inputs: Renamed ImGuiKey_ModXXX introduced in 1.87 to ImGuiMod_XXX (old names still supported).
//  2022-01-26: Inputs: replaced short-lived io.AddKeyModsEvent() (added two weeks ago) with io.AddKeyEvent() using ImGuiKey_ModXXX flags. Sorry for the confusion.
//  2021-01-20: Inputs: calling new io.AddKeyAnalogEvent() for gamepad support, instead of writing directly to io.NavInputs[].
//  2022-01-17: Inputs: calling new io.AddMousePosEvent(), io.AddMouseButtonEvent(), io.AddMouseWheelEvent() API (1.87+).
//  2022-01-17: Inputs: always update key mods next and before a key event (not in NewFrame) to fix input queue with very low framerates.
//  2022-01-12: Inputs: Update mouse inputs using WM_MOUSEMOVE/WM_MOUSELEAVE + fallback to provide it when focused but not hovered/captured. More standard and will allow us to pass it to future input queue API.
//  2022-01-12: Inputs: Maintain our own copy of MouseButtonsDown mask instead of using ImGui::IsAnyMouseDown() which will be obsoleted.
//  2022-01-10: Inputs: calling new io.AddKeyEvent(), io.AddKeyModsEvent() + io.SetKeyEventNativeData() API (1.87+). Support for full ImGuiKey range.
//  2021-12-16: Inputs: Fill VK_LCONTROL/VK_RCONTROL/VK_LSHIFT/VK_RSHIFT/VK_LMENU/VK_RMENU for completeness.
//  2021-08-17: Calling io.AddFocusEvent() on WM_SETFOCUS/WM_KILLFOCUS messages.
//  2021-08-02: Inputs: Fixed keyboard modifiers being reported when host window doesn't have focus.
//  2021-07-29: Inputs: MousePos is correctly reported when the host platform window is hovered but not focused (using TrackMouseEvent() to receive WM_MOUSELEAVE events).
//  2021-06-29: Reorganized backend to pull data from a single structure to facilitate usage with multiple-contexts (all g_XXXX access changed to bd->XXXX).
//  2021-06-08: Fixed ImGui_ImplWin32_EnableDpiAwareness() and ImGui_ImplWin32_GetDpiScaleForMonitor() to handle Windows 8.1/10 features without a manifest (per-monitor DPI, and properly calls SetProcessDpiAwareness() on 8.1).
//  2021-03-23: Inputs: Clearing keyboard down array when losing focus (WM_KILLFOCUS).
//  2021-02-18: Added ImGui_ImplWin32_EnableAlphaCompositing(). Non Visual Studio users will need to link with dwmapi.lib (MinGW/gcc: use -ldwmapi).
//  2021-02-17: Fixed ImGui_ImplWin32_EnableDpiAwareness() attempting to get SetProcessDpiAwareness from shcore.dll on Windows 8 whereas it is only supported on Windows 8.1.
//  2021-01-25: Inputs: Dynamically loading XInput DLL.
//  2020-12-04: Misc: Fixed setting of io.DisplaySize to invalid/uninitialized data when after hwnd has been closed.
//  2020-03-03: Inputs: Calling AddInputCharacterUTF16() to support surrogate pairs leading to codepoint >= 0x10000 (for more complete CJK inputs)
//  2020-02-17: Added ImGui_ImplWin32_EnableDpiAwareness(), ImGui_ImplWin32_GetDpiScaleForHwnd(), ImGui_ImplWin32_GetDpiScaleForMonitor() helper functions.
//  2020-01-14: Inputs: Added support for #define IMGUI_IMPL_WIN32_DISABLE_GAMEPAD/IMGUI_IMPL_WIN32_DISABLE_LINKING_XINPUT.
//  2019-12-05: Inputs: Added support for ImGuiMouseCursor_NotAllowed mouse cursor.
//  2019-05-11: Inputs: Don't filter value from WM_CHAR before calling AddInputCharacter().
//  2019-01-17: Misc: Using GetForegroundWindow()+IsChild() instead of GetActiveWindow() to be compatible with windows created in a different thread or parent.
//  2019-01-17: Inputs: Added support for mouse buttons 4 and 5 via WM_XBUTTON* messages.
//  2019-01-15: Inputs: Added support for XInput gamepads (if ImGuiConfigFlags_NavEnableGamepad is set by user application).
//  2018-11-30: Misc: Setting up io.BackendPlatformName so it can be displayed in the About Window.
//  2018-06-29: Inputs: Added support for the ImGuiMouseCursor_Hand cursor.
//  2018-06-10: Inputs: Fixed handling of mouse wheel messages to support fine position messages (typically sent by track-pads).
//  2018-06-08: Misc: Extracted imgui_impl_win32.cpp/.h away from the old combined DX9/DX10/DX11/DX12 examples.
//  2018-03-20: Misc: Setup io.BackendFlags ImGuiBackendFlags_HasMouseCursors and ImGuiBackendFlags_HasSetMousePos flags + honor ImGuiConfigFlags_NoMouseCursorChange flag.
//  2018-02-20: Inputs: Added support for mouse cursors (ImGui::GetMouseCursor() value and WM_SETCURSOR message handling).
//  2018-02-06: Inputs: Added mapping for ImGuiKey_Space.
//  2018-02-06: Inputs: Honoring the io.WantSetMousePos by repositioning the mouse (when using navigation and ImGuiConfigFlags_NavMoveMouse is set).
//  2018-02-06: Misc: Removed call to ImGui::Shutdown() which is not available from 1.60 WIP, user needs to call CreateContext/DestroyContext themselves.
//  2018-01-20: Inputs: Added Horizontal Mouse Wheel support.
//  2018-01-08: Inputs: Added mapping for ImGuiKey_Insert.
//  2018-01-05: Inputs: Added WM_LBUTTONDBLCLK double-click handlers for window classes with the CS_DBLCLKS flag.
//  2017-10-23: Inputs: Added WM_SYSKEYDOWN / WM_SYSKEYUP handlers so e.g. the VK_MENU key can be read.
//  2017-10-23: Inputs: Using Win32 ::SetCapture/::GetCapture() to retrieve mouse positions outside the client area when dragging.
//  2016-11-12: Inputs: Only call Win32 ::SetCursor(nullptr) when io.MouseDrawCursor is set.

struct ImGui_ImplX11_Data
{
    Display*                    display;
    Window                      window;
    int                         MouseTrackedArea;   // 0: not tracked, 1: client area, 2: non-client area
    int                         MouseButtonsDown;
    int64_t                     Time;
    int64_t                     TicksPerSecond;
    ImGuiMouseCursor            LastMouseCursor;
    unsigned int                KeyboardCodePage;

    ImGui_ImplX11_Data()        { memset((void*)this, 0, sizeof(*this)); }
};

// Backend data stored in io.BackendPlatformUserData to allow support for multiple Dear ImGui contexts
// It is STRONGLY preferred that you use docking branch with multi-viewports (== single Dear ImGui context + multiple windows) instead of multiple Dear ImGui contexts.
// FIXME: multi-context support is not well tested and probably dysfunctional in this backend.
// FIXME: some shared resources (mouse cursor shape, gamepad) are mishandled when using multi-context.
static ImGui_ImplX11_Data* ImGui_ImplX11_GetBackendData()
{
    return ImGui::GetCurrentContext() ? (ImGui_ImplX11_Data*)ImGui::GetIO().BackendPlatformUserData : nullptr;
}

// Functions
static void ImGui_ImplX11_UpdateKeyboardCodePage()
{
    // Retrieve keyboard code page, required for handling of non-Unicode environments.
    ImGui_ImplX11_Data* bd = ImGui_ImplX11_GetBackendData();

    // Get the current locale
    char* locale = setlocale(LC_CTYPE, "");
    if (locale)
    {
        // Get the code page from the locale
        char* codepage = nl_langinfo(CODESET);
        if (codepage)
        {
            // Convert the code page to an integer representation
            bd->KeyboardCodePage = atoi(codepage);
        }
        else
        {
            // Fallback to default ANSI code page when fails
            bd->KeyboardCodePage = 0; // Default code page
        }
    }
    else
    {
        // Fallback to default ANSI code page when fails
        bd->KeyboardCodePage = 0; // Default code page
    }
}

static bool ImGui_ImplX11_InitEx(Display* display, Window window, bool platform_has_own_dc)
{
    ImGuiIO& io = ImGui::GetIO();
    IM_ASSERT(io.BackendPlatformUserData == nullptr && "Already initialized a platform backend!");

    struct timespec ts;
    if (clock_gettime(CLOCK_MONOTONIC, &ts) != 0)
        return false;

    // Setup backend capabilities flags
    ImGui_ImplX11_Data* bd = IM_NEW(ImGui_ImplX11_Data)();
    io.BackendPlatformUserData = (void*)bd;
    io.BackendPlatformName = "imgui_impl_x11";
    io.BackendFlags |= ImGuiBackendFlags_HasMouseCursors;         // We can honor GetMouseCursor() values (optional)
    io.BackendFlags |= ImGuiBackendFlags_HasSetMousePos;          // We can honor io.WantSetMousePos requests (optional, rarely used)

    bd->display = display;
    bd->window = window;
    bd->TicksPerSecond = 1e9; // Nanoseconds
    bd->Time = ts.tv_sec * 1e9 + ts.tv_nsec;
    bd->LastMouseCursor = ImGuiMouseCursor_COUNT;
    ImGui_ImplX11_UpdateKeyboardCodePage();

    // Set platform dependent data in viewport
    ImGui::GetMainViewport()->PlatformHandleRaw = (void*)window;
    IM_UNUSED(platform_has_own_dc); // Used in 'docking' branch

    return true;
}

IMGUI_IMPL_API bool     ImGui_ImplX11_Init(Display* display, Window window)
{
    return ImGui_ImplX11_InitEx(display, window, false);
}

IMGUI_IMPL_API bool     ImGui_ImplX11_InitForOpenGL(Display* display, Window window)
{
    // OpenGL needs CS_OWNDC
    return ImGui_ImplX11_InitEx(display, window, true);
}

void    ImGui_ImplX11_Shutdown()
{
    ImGui_ImplX11_Data* bd = ImGui_ImplX11_GetBackendData();
    IM_ASSERT(bd != nullptr && "No platform backend to shutdown, or already shutdown?");
    ImGuiIO& io = ImGui::GetIO();

    io.BackendPlatformName = nullptr;
    io.BackendPlatformUserData = nullptr;
    io.BackendFlags &= ~(ImGuiBackendFlags_HasMouseCursors | ImGuiBackendFlags_HasSetMousePos);
    IM_DELETE(bd);
}

static bool ImGui_ImplX11_UpdateMouseCursor(Display* display, Window window)
{
    ImGuiIO& io = ImGui::GetIO();
    if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)
        return false;

    ImGuiMouseCursor imgui_cursor = ImGui::GetMouseCursor();
    if (imgui_cursor == ImGuiMouseCursor_None || io.MouseDrawCursor)
    {
        // Hide OS mouse cursor if imgui is drawing it or if it wants no cursor
        XUndefineCursor(display, window);
    }
    else
    {
        // Show OS mouse cursor
        Cursor x11_cursor = None;
        switch (imgui_cursor)
        {
        case ImGuiMouseCursor_Arrow:        x11_cursor = XCreateFontCursor(display, XC_left_ptr); break;
        case ImGuiMouseCursor_TextInput:    x11_cursor = XCreateFontCursor(display, XC_xterm); break;
        case ImGuiMouseCursor_ResizeAll:    x11_cursor = XCreateFontCursor(display, XC_fleur); break;
        case ImGuiMouseCursor_ResizeEW:     x11_cursor = XCreateFontCursor(display, XC_sb_h_double_arrow); break;
        case ImGuiMouseCursor_ResizeNS:     x11_cursor = XCreateFontCursor(display, XC_sb_v_double_arrow); break;
        case ImGuiMouseCursor_ResizeNESW:   x11_cursor = XCreateFontCursor(display, XC_bottom_left_corner); break;
        case ImGuiMouseCursor_ResizeNWSE:   x11_cursor = XCreateFontCursor(display, XC_bottom_right_corner); break;
        case ImGuiMouseCursor_Hand:         x11_cursor = XCreateFontCursor(display, XC_hand2); break;
        case ImGuiMouseCursor_NotAllowed:   x11_cursor = XCreateFontCursor(display, XC_X_cursor); break;
        }
        XDefineCursor(display, window, x11_cursor);
    }
    return true;
}

static bool IsKeyDown(Display* display, int keycode)
{
    char keys_return[32];
    XQueryKeymap(display, keys_return);
    return keys_return[keycode / 8] & (1 << (keycode % 8));
}

static void ImGui_ImplX11_AddKeyEvent(ImGuiKey key, bool down, int native_keycode, int native_scancode = -1)
{
    ImGuiIO& io = ImGui::GetIO();
    io.AddKeyEvent(key, down);
    io.SetKeyEventNativeData(key, native_keycode, native_scancode); // To support legacy indexing (<1.87 user code)
    IM_UNUSED(native_scancode);
}

static void ImGui_ImplX11_ProcessKeyEventsWorkarounds(Display* display)
{
    // Left & right Shift keys: when both are pressed together, X11 tend to not generate the key release event for the first released one.
    if (ImGui::IsKeyDown(ImGuiKey_LeftShift) && !IsKeyDown(display, XKeysymToKeycode(display, XK_Shift_L)))
        ImGui_ImplX11_AddKeyEvent(ImGuiKey_LeftShift, false, XKeysymToKeycode(display, XK_Shift_L));
    if (ImGui::IsKeyDown(ImGuiKey_RightShift) && !IsKeyDown(display, XKeysymToKeycode(display, XK_Shift_R)))
        ImGui_ImplX11_AddKeyEvent(ImGuiKey_RightShift, false, XKeysymToKeycode(display, XK_Shift_R));

    // Sometimes key release for Super key is not passed down to the app.
    if (ImGui::IsKeyDown(ImGuiKey_LeftSuper) && !IsKeyDown(display, XKeysymToKeycode(display, XK_Super_L)))
        ImGui_ImplX11_AddKeyEvent(ImGuiKey_LeftSuper, false, XKeysymToKeycode(display, XK_Super_L));
    if (ImGui::IsKeyDown(ImGuiKey_RightSuper) && !IsKeyDown(display, XKeysymToKeycode(display, XK_Super_R)))
        ImGui_ImplX11_AddKeyEvent(ImGuiKey_RightSuper, false, XKeysymToKeycode(display, XK_Super_R));
}

static void ImGui_ImplX11_UpdateKeyModifiers(Display* display)
{
    ImGuiIO& io = ImGui::GetIO();
    io.AddKeyEvent(ImGuiMod_Ctrl, IsKeyDown(display, XKeysymToKeycode(display, XK_Control_L)) || IsKeyDown(display, XKeysymToKeycode(display, XK_Control_R)));
    io.AddKeyEvent(ImGuiMod_Shift, IsKeyDown(display, XKeysymToKeycode(display, XK_Shift_L)) || IsKeyDown(display, XKeysymToKeycode(display, XK_Shift_R)));
    io.AddKeyEvent(ImGuiMod_Alt, IsKeyDown(display, XKeysymToKeycode(display, XK_Alt_L)) || IsKeyDown(display, XKeysymToKeycode(display, XK_Alt_R)));
    io.AddKeyEvent(ImGuiMod_Super, IsKeyDown(display, XKeysymToKeycode(display, XK_Super_L)) || IsKeyDown(display, XKeysymToKeycode(display, XK_Super_R)));
}

static void ImGui_ImplX11_UpdateMouseData(Display* display, Window window)
{
    ImGui_ImplX11_Data* bd = ImGui_ImplX11_GetBackendData();
    ImGuiIO& io = ImGui::GetIO();
    IM_ASSERT(window != 0);

    Window root_return, child_return;
    int root_x_return, root_y_return;
    int win_x_return, win_y_return;
    unsigned int mask_return;

    if (XQueryPointer(display, window, &root_return, &child_return, &root_x_return, &root_y_return, &win_x_return, &win_y_return, &mask_return))
    {
        io.AddMousePosEvent((float)win_x_return, (float)win_y_return);
    }
}


static struct libevdev* dev = nullptr;
static int fd = -1;

static void ImGui_ImplX11_InitGamepad()
{
    fd = open("/dev/input/eventX", O_RDONLY | O_NONBLOCK); // Replace 'eventX' with the correct event number for your gamepad
    if (fd < 0)
    {
        perror("Failed to open gamepad device");
        return;
    }

    int rc = libevdev_new_from_fd(fd, &dev);
    if (rc < 0)
    {
        perror("Failed to init libevdev");
        close(fd);
        fd = -1;
        return;
    }
}

// Gamepad navigation mapping
static void ImGui_ImplX11_UpdateGamepads()
{
    ImGuiIO& io = ImGui::GetIO();
    io.BackendFlags &= ~ImGuiBackendFlags_HasGamepad;

    if (fd < 0)
        return;

    struct input_event ev;
    while (libevdev_next_event(dev, LIBEVDEV_READ_FLAG_NORMAL, &ev) == 0)
    {
        if (ev.type == EV_KEY)
        {
            #define MAP_BUTTON(KEY_NO, BUTTON_ENUM)     { io.AddKeyEvent(KEY_NO, ev.value != 0); }
            switch (ev.code)
            {
                case BTN_START: MAP_BUTTON(ImGuiKey_GamepadStart, ev.code); break;
                case BTN_SELECT: MAP_BUTTON(ImGuiKey_GamepadBack, ev.code); break;
                case BTN_X: MAP_BUTTON(ImGuiKey_GamepadFaceLeft, ev.code); break;
                case BTN_B: MAP_BUTTON(ImGuiKey_GamepadFaceRight, ev.code); break;
                case BTN_Y: MAP_BUTTON(ImGuiKey_GamepadFaceUp, ev.code); break;
                case BTN_A: MAP_BUTTON(ImGuiKey_GamepadFaceDown, ev.code); break;
                case BTN_DPAD_LEFT: MAP_BUTTON(ImGuiKey_GamepadDpadLeft, ev.code); break;
                case BTN_DPAD_RIGHT: MAP_BUTTON(ImGuiKey_GamepadDpadRight, ev.code); break;
                case BTN_DPAD_UP: MAP_BUTTON(ImGuiKey_GamepadDpadUp, ev.code); break;
                case BTN_DPAD_DOWN: MAP_BUTTON(ImGuiKey_GamepadDpadDown, ev.code); break;
                case BTN_TL: MAP_BUTTON(ImGuiKey_GamepadL1, ev.code); break;
                case BTN_TR: MAP_BUTTON(ImGuiKey_GamepadR1, ev.code); break;
                case BTN_THUMBL: MAP_BUTTON(ImGuiKey_GamepadL3, ev.code); break;
                case BTN_THUMBR: MAP_BUTTON(ImGuiKey_GamepadR3, ev.code); break;
            }
            #undef MAP_BUTTON
        }
        else if (ev.type == EV_ABS)
        {
            #define MAP_ANALOG(KEY_NO, VALUE, V0, V1)   { float vn = (float)(VALUE - V0) / (float)(V1 - V0); io.AddKeyAnalogEvent(KEY_NO, vn > 0.10f, IM_SATURATE(vn)); }
            switch (ev.code)
            {
                case ABS_X: MAP_ANALOG(ImGuiKey_GamepadLStickLeft, ev.value, 0, 32767); break;
                case ABS_Y: MAP_ANALOG(ImGuiKey_GamepadLStickUp, ev.value, 0, 32767); break;
                case ABS_RX: MAP_ANALOG(ImGuiKey_GamepadRStickLeft, ev.value, 0, 32767); break;
                case ABS_RY: MAP_ANALOG(ImGuiKey_GamepadRStickUp, ev.value, 0, 32767); break;
                case ABS_Z: MAP_ANALOG(ImGuiKey_GamepadL2, ev.value, 0, 255); break;
                case ABS_RZ: MAP_ANALOG(ImGuiKey_GamepadR2, ev.value, 0, 255); break;
            }
            #undef MAP_ANALOG
        }
    }

    io.BackendFlags |= ImGuiBackendFlags_HasGamepad;
}

void ImGui_ImplX11_ShutdownGamepad()
{
    if (dev)
    {
        libevdev_free(dev);
        dev = nullptr;
    }
    if (fd >= 0)
    {
        close(fd);
        fd = -1;
    }
}


#endif // #ifndef IMGUI_DISABLE